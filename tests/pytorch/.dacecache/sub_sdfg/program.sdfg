{
  "type": "SDFG",
  "attributes": {
    "arg_types": [],
    "constants_prop": {},
    "_arrays": {
      "array_inputs__2": {
        "type": "Array",
        "attributes": {
          "allow_conflicts": false,
          "strides": [
            "1"
          ],
          "total_size": "1",
          "offset": [
            "0"
          ],
          "may_alias": false,
          "alignment": 0,
          "dtype": "int64",
          "shape": [
            "1"
          ],
          "transient": false,
          "storage": "CPU_Heap",
          "lifetime": "Scope",
          "location": {},
          "debuginfo": null
        }
      },
      "array_inputs__0": {
        "type": "Array",
        "attributes": {
          "allow_conflicts": false,
          "strides": [
            "1"
          ],
          "total_size": "1",
          "offset": [
            "0"
          ],
          "may_alias": false,
          "alignment": 0,
          "dtype": "int64",
          "shape": [
            "1"
          ],
          "transient": false,
          "storage": "CPU_Heap",
          "lifetime": "Scope",
          "location": {},
          "debuginfo": null
        }
      },
      "array_inputs__1": {
        "type": "Array",
        "attributes": {
          "allow_conflicts": false,
          "strides": [
            "1"
          ],
          "total_size": "1",
          "offset": [
            "0"
          ],
          "may_alias": false,
          "alignment": 0,
          "dtype": "int64",
          "shape": [
            "1"
          ],
          "transient": false,
          "storage": "CPU_Heap",
          "lifetime": "Scope",
          "location": {},
          "debuginfo": null
        }
      },
      "array_concat_result": {
        "type": "Array",
        "attributes": {
          "allow_conflicts": false,
          "strides": [
            "1"
          ],
          "total_size": "3",
          "offset": [
            "0"
          ],
          "may_alias": false,
          "alignment": 0,
          "dtype": "int64",
          "shape": [
            "3"
          ],
          "transient": false,
          "storage": "CPU_Heap",
          "lifetime": "Scope",
          "location": {},
          "debuginfo": null
        }
      }
    },
    "symbols": {},
    "global_code": {
      "frame": {
        "string_data": "\n        // Start global ORT setup\n        const OrtApi* __ort_api = OrtGetApiBase()->GetApi(ORT_API_VERSION);\n\n        // helper function to check for status\n        void __ort_check_status(OrtStatus* status)\n        {\n            if (status != NULL) {\n                const char* msg = __ort_api->GetErrorMessage(status);\n                fprintf(stderr, \"%s\\n\", msg);\n                __ort_api->ReleaseStatus(status);\n                exit(1);\n            }\n        }\n        OrtEnv* __ort_env;\n        OrtKernelSession* __ort_session;\n        OrtSessionOptions* __ort_session_options;\n\n        OrtMemoryInfo* __ort_cpu_mem_info;\n        // End global ORT setup\nOrtExecutableKernel *__ort_kernel_ONNX_ONNX_Concat_53_0_0_0;\nOrtExecutableKernelContext *__ort_context_ONNX_ONNX_Concat_53_0_0_0;\n",
        "language": "CPP"
      }
    },
    "init_code": {
      "frame": {
        "string_data": "\n        __ort_check_status(__ort_api->CreateCpuMemoryInfo(OrtDeviceAllocator, OrtMemTypeDefault, &__ort_cpu_mem_info));\n        __ort_check_status(__ort_api->CreateEnv(ORT_LOGGING_LEVEL_WARNING, \"dace_graph\", &__ort_env));\n        __ort_check_status(__ort_api->CreateSessionOptions(&__ort_session_options));\n        __ort_check_status(OrtSessionOptionsAppendExecutionProvider_CPU(__ort_session_options, /*use_arena=*/0));\n        \n        __ort_check_status(__ort_api->CreateKernelSession(__ort_session_options, &__ort_session, 12));\n        \n    {\n    // Setup for ONNX_ONNX_Concat_53_0_0_0\n    __ort_check_status(__ort_api->CreateExecutableKernelContext(\"ONNX_ONNX_Concat_53_0_0_0\", \"Concat\", &__ort_context_ONNX_ONNX_Concat_53_0_0_0));\n    \n        // Add parameter inputs__0\n        __ort_check_status(__ort_api->ExecutableKernelContext_AddInput(__ort_context_ONNX_ONNX_Concat_53_0_0_0, ONNX_TENSOR_ELEMENT_DATA_TYPE_INT64));\n        \n        // Add parameter inputs__1\n        __ort_check_status(__ort_api->ExecutableKernelContext_AddInput(__ort_context_ONNX_ONNX_Concat_53_0_0_0, ONNX_TENSOR_ELEMENT_DATA_TYPE_INT64));\n        \n        // Add parameter inputs__2\n        __ort_check_status(__ort_api->ExecutableKernelContext_AddInput(__ort_context_ONNX_ONNX_Concat_53_0_0_0, ONNX_TENSOR_ELEMENT_DATA_TYPE_INT64));\n        \n        // Add parameter concat_result\n        __ort_check_status(__ort_api->ExecutableKernelContext_AddOutput(__ort_context_ONNX_ONNX_Concat_53_0_0_0, ONNX_TENSOR_ELEMENT_DATA_TYPE_INT64));\n        // Setup attributes\n{\n    // Setup attribute axis\n    \n        __ort_check_status(__ort_api->ExecutableKernelContext_AddAttributeInt(__ort_context_ONNX_ONNX_Concat_53_0_0_0, \"axis\", 0));\n        }\n__ort_check_status(__ort_api->CreateExecutableKernel(__ort_session, __ort_context_ONNX_ONNX_Concat_53_0_0_0, /*provider_index=*/0, &__ort_kernel_ONNX_ONNX_Concat_53_0_0_0));\n} // end setup for context_ONNX_ONNX_Concat_53_0_0_0",
        "language": "CPP"
      }
    },
    "exit_code": {
      "frame": {
        "string_data": "__ort_api->ReleaseExecutableKernel(__ort_kernel_ONNX_ONNX_Concat_53_0_0_0);\n__ort_api->ReleaseExecutableKernelContext(__ort_context_ONNX_ONNX_Concat_53_0_0_0);\n\n        __ort_api->ReleaseMemoryInfo(__ort_cpu_mem_info);\n        __ort_api->ReleaseKernelSession(__ort_session);\n        __ort_api->ReleaseSessionOptions(__ort_session_options);\n        __ort_api->ReleaseEnv(__ort_env);\n        ",
        "language": "CPP"
      }
    },
    "orig_sdfg": null,
    "transformation_hist": [],
    "name": "sub_sdfg"
  },
  "nodes": [
    {
      "type": "SDFGState",
      "label": "state_0",
      "id": 0,
      "collapsed": false,
      "scope_dict": {
        "-1": [
          0,
          1,
          2,
          3,
          4
        ]
      },
      "nodes": [
        {
          "type": "AccessNode",
          "label": "array_inputs__2",
          "attributes": {
            "access": "ReadWrite",
            "setzero": false,
            "debuginfo": {
              "type": "DebugInfo",
              "start_line": 150,
              "end_line": 150,
              "start_column": 0,
              "end_column": 0,
              "filename": "/home/shigang/daceml_commits/daceml/daceml/transformation/constant_folding.py"
            },
            "data": "array_inputs__2",
            "in_connectors": {},
            "out_connectors": {}
          },
          "id": 0,
          "scope_entry": null,
          "scope_exit": null
        },
        {
          "type": "AccessNode",
          "label": "array_inputs__0",
          "attributes": {
            "access": "ReadWrite",
            "setzero": false,
            "debuginfo": {
              "type": "DebugInfo",
              "start_line": 150,
              "end_line": 150,
              "start_column": 0,
              "end_column": 0,
              "filename": "/home/shigang/daceml_commits/daceml/daceml/transformation/constant_folding.py"
            },
            "data": "array_inputs__0",
            "in_connectors": {},
            "out_connectors": {}
          },
          "id": 1,
          "scope_entry": null,
          "scope_exit": null
        },
        {
          "type": "AccessNode",
          "label": "array_inputs__1",
          "attributes": {
            "access": "ReadWrite",
            "setzero": false,
            "debuginfo": {
              "type": "DebugInfo",
              "start_line": 150,
              "end_line": 150,
              "start_column": 0,
              "end_column": 0,
              "filename": "/home/shigang/daceml_commits/daceml/daceml/transformation/constant_folding.py"
            },
            "data": "array_inputs__1",
            "in_connectors": {},
            "out_connectors": {}
          },
          "id": 2,
          "scope_entry": null,
          "scope_exit": null
        },
        {
          "type": "AccessNode",
          "label": "array_concat_result",
          "attributes": {
            "access": "ReadWrite",
            "setzero": false,
            "debuginfo": {
              "type": "DebugInfo",
              "start_line": 181,
              "end_line": 181,
              "start_column": 0,
              "end_column": 0,
              "filename": "/home/shigang/daceml_commits/daceml/daceml/transformation/constant_folding.py"
            },
            "data": "array_concat_result",
            "in_connectors": {},
            "out_connectors": {}
          },
          "id": 3,
          "scope_entry": null,
          "scope_exit": null
        },
        {
          "type": "Tasklet",
          "label": "onnx_code",
          "attributes": {
            "code": {
              "string_data": "\n            int64_t input_inputs__0_dims[1] = {1};\n            \n            OrtValue* ort_value_input_inputs__0;\n            __ort_check_status(__ort_api->CreateTensorWithDataAsOrtValue(\n                __ort_cpu_mem_info,\n                const_cast < void * > (reinterpret_cast < const void * > (inputs__0)),\n                1 * sizeof(long long),\n                input_inputs__0_dims,\n                1,\n                ONNX_TENSOR_ELEMENT_DATA_TYPE_INT64,\n                &ort_value_input_inputs__0\n            ));\n            \n            int64_t input_inputs__1_dims[1] = {1};\n            \n            OrtValue* ort_value_input_inputs__1;\n            __ort_check_status(__ort_api->CreateTensorWithDataAsOrtValue(\n                __ort_cpu_mem_info,\n                const_cast < void * > (reinterpret_cast < const void * > (inputs__1)),\n                1 * sizeof(long long),\n                input_inputs__1_dims,\n                1,\n                ONNX_TENSOR_ELEMENT_DATA_TYPE_INT64,\n                &ort_value_input_inputs__1\n            ));\n            \n            int64_t input_inputs__2_dims[1] = {1};\n            \n            OrtValue* ort_value_input_inputs__2;\n            __ort_check_status(__ort_api->CreateTensorWithDataAsOrtValue(\n                __ort_cpu_mem_info,\n                const_cast < void * > (reinterpret_cast < const void * > (inputs__2)),\n                1 * sizeof(long long),\n                input_inputs__2_dims,\n                1,\n                ONNX_TENSOR_ELEMENT_DATA_TYPE_INT64,\n                &ort_value_input_inputs__2\n            ));\n            \n            int64_t output_concat_result_dims[1] = {3};\n            \n            OrtValue* ort_value_output_concat_result;\n            __ort_check_status(__ort_api->CreateTensorWithDataAsOrtValue(\n                __ort_cpu_mem_info,\n                const_cast < void * > (reinterpret_cast < const void * > (concat_result)),\n                3 * sizeof(long long),\n                output_concat_result_dims,\n                1,\n                ONNX_TENSOR_ELEMENT_DATA_TYPE_INT64,\n                &ort_value_output_concat_result\n            ));\n            __ort_check_status(__ort_api->ExecutableKernel_SetInput(__ort_kernel_ONNX_ONNX_Concat_53_0_0_0, 0, ort_value_input_inputs__0));\n__ort_check_status(__ort_api->ExecutableKernel_SetInput(__ort_kernel_ONNX_ONNX_Concat_53_0_0_0, 1, ort_value_input_inputs__1));\n__ort_check_status(__ort_api->ExecutableKernel_SetInput(__ort_kernel_ONNX_ONNX_Concat_53_0_0_0, 2, ort_value_input_inputs__2));\n__ort_check_status(__ort_api->ExecutableKernel_SetOutput(__ort_kernel_ONNX_ONNX_Concat_53_0_0_0, 0, ort_value_output_concat_result));\n__ort_check_status(__ort_api->ExecutableKernel_Compute(__ort_kernel_ONNX_ONNX_Concat_53_0_0_0));\n__ort_api->ReleaseValue(ort_value_input_inputs__0);\n__ort_api->ReleaseValue(ort_value_input_inputs__1);\n__ort_api->ReleaseValue(ort_value_input_inputs__2);\n__ort_api->ReleaseValue(ort_value_output_concat_result);\n",
              "language": "CPP"
            },
            "debuginfo": {
              "type": "DebugInfo",
              "start_line": 0,
              "end_line": 0,
              "start_column": 0,
              "end_column": 0,
              "filename": null
            },
            "instrument": "No_Instrumentation",
            "label": "onnx_code",
            "location": {},
            "environments": [
              "ONNXRuntime"
            ],
            "in_connectors": {
              "inputs__0": {
                "type": "pointer",
                "dtype": "int64"
              },
              "inputs__1": {
                "type": "pointer",
                "dtype": "int64"
              },
              "inputs__2": {
                "type": "pointer",
                "dtype": "int64"
              }
            },
            "out_connectors": {
              "concat_result": {
                "type": "pointer",
                "dtype": "int64"
              }
            }
          },
          "id": 4,
          "scope_entry": null,
          "scope_exit": null
        }
      ],
      "edges": [
        {
          "type": "MultiConnectorEdge",
          "attributes": {
            "data": {
              "type": "Memlet",
              "attributes": {
                "volume": "1",
                "dynamic": false,
                "subset": {
                  "type": "Range",
                  "ranges": [
                    {
                      "start": "0",
                      "end": "0",
                      "step": "1",
                      "tile": "1"
                    }
                  ]
                },
                "other_subset": null,
                "data": "array_inputs__0",
                "wcr": null,
                "debuginfo": null,
                "wcr_nonatomic": false,
                "allow_oob": false,
                "src_subset": {
                  "type": "Range",
                  "ranges": [
                    {
                      "start": "0",
                      "end": "0",
                      "step": "1",
                      "tile": "1"
                    }
                  ]
                },
                "dst_subset": null,
                "num_accesses": "1"
              }
            }
          },
          "src": "1",
          "dst": "4",
          "dst_connector": "inputs__0",
          "src_connector": null
        },
        {
          "type": "MultiConnectorEdge",
          "attributes": {
            "data": {
              "type": "Memlet",
              "attributes": {
                "volume": "1",
                "dynamic": false,
                "subset": {
                  "type": "Range",
                  "ranges": [
                    {
                      "start": "0",
                      "end": "0",
                      "step": "1",
                      "tile": "1"
                    }
                  ]
                },
                "other_subset": null,
                "data": "array_inputs__1",
                "wcr": null,
                "debuginfo": null,
                "wcr_nonatomic": false,
                "allow_oob": false,
                "src_subset": {
                  "type": "Range",
                  "ranges": [
                    {
                      "start": "0",
                      "end": "0",
                      "step": "1",
                      "tile": "1"
                    }
                  ]
                },
                "dst_subset": null,
                "num_accesses": "1"
              }
            }
          },
          "src": "2",
          "dst": "4",
          "dst_connector": "inputs__1",
          "src_connector": null
        },
        {
          "type": "MultiConnectorEdge",
          "attributes": {
            "data": {
              "type": "Memlet",
              "attributes": {
                "volume": "1",
                "dynamic": false,
                "subset": {
                  "type": "Range",
                  "ranges": [
                    {
                      "start": "0",
                      "end": "0",
                      "step": "1",
                      "tile": "1"
                    }
                  ]
                },
                "other_subset": null,
                "data": "array_inputs__2",
                "wcr": null,
                "debuginfo": null,
                "wcr_nonatomic": false,
                "allow_oob": false,
                "src_subset": {
                  "type": "Range",
                  "ranges": [
                    {
                      "start": "0",
                      "end": "0",
                      "step": "1",
                      "tile": "1"
                    }
                  ]
                },
                "dst_subset": null,
                "num_accesses": "1"
              }
            }
          },
          "src": "0",
          "dst": "4",
          "dst_connector": "inputs__2",
          "src_connector": null
        },
        {
          "type": "MultiConnectorEdge",
          "attributes": {
            "data": {
              "type": "Memlet",
              "attributes": {
                "volume": "3",
                "dynamic": false,
                "subset": {
                  "type": "Range",
                  "ranges": [
                    {
                      "start": "0",
                      "end": "2",
                      "step": "1",
                      "tile": "1"
                    }
                  ]
                },
                "other_subset": null,
                "data": "array_concat_result",
                "wcr": null,
                "debuginfo": null,
                "wcr_nonatomic": false,
                "allow_oob": false,
                "src_subset": null,
                "dst_subset": {
                  "type": "Range",
                  "ranges": [
                    {
                      "start": "0",
                      "end": "2",
                      "step": "1",
                      "tile": "1"
                    }
                  ]
                },
                "num_accesses": "3"
              }
            }
          },
          "src": "4",
          "dst": "3",
          "dst_connector": null,
          "src_connector": "concat_result"
        }
      ],
      "attributes": {
        "is_collapsed": false,
        "nosync": false,
        "instrument": "No_Instrumentation",
        "location": {}
      }
    }
  ],
  "edges": [],
  "sdfg_list_id": 0
}